// ==================================
// new predicates
// ==================================
function isEven(x: isInt): isBool {
    x % 2 == 0
}
derive(isInt, isEven);


function isOdd(x: isInt): isBool {
    !isEven(x)
}
derive(isInt, isOdd);


// ==================================
// an increment function
// ==================================
function inc(x: isInt): isInt {
    x + 1
}

// it can now be overridden
// for our new predicates!

function inc(x: isEven): isOdd {
    // integer addition
    // hard casted to isOdd
    // hard casts don't check
    // before casting
    genAS(isOdd)(x + 1)
}

function inc(x: isOdd): isEven {
    // integer addition
    // hard casted to isEven
    // hard casts don't check
    // before casting
    genAS(isEven)(x + 1)
}

let incInt: isInt = inc(1);
println("inc isInt  1: " + type(incInt) + " " + incInt);

let even: isEven = genAS(isEven)(2);
let incEven: isOdd = inc(even);
println("inc isEven 2: " + type(incEven) + " " + incEven);

let odd: isOdd = genAS(isOdd)(3);
let incOdd: isEven = inc(odd);
println("inc isOdd  3: " + type(incOdd) + " " + incOdd);