// useful for debugging
interface spy;
function spy(x: isAny, tag: isString): isAny {
    println(tag + ": " + x)
    x
}


interface map;
function map(xs: isList, f: isFn): isList {
    loop(xs = xs, acc = []) {
        if (isEmpty(xs))
            acc
        else
            recur(
                xs  = slice(xs, 1),
                acc = push(acc, f(xs[0]))
            )
    }
}


interface zip;
function zip(xs: isList, ys: isList): isList {
    loop(xs = xs, ys = ys, acc = []) {
        if (isEmpty(xs) && isEmpty(ys))
            acc
        else
            recur(
                xs  = slice(xs, 1),
                ys  = slice(ys, 1), 
                acc = push(acc, [xs[0], ys[0]])
            )
    }
}


interface every;
function every(xs: isList, f: isPred): isBool {
    loop(xs = xs) {
        if (isEmpty(xs))
            true
        else if (f(xs[0]))
            recur(xs = slice(xs, 1))
        else
            false
    }
}


interface gen_isListOf;
memoized function gen_isListOf(t: isPred): isPred {
    interface isListOf<t> extends isList;

    function isListOf(obj: isList): isBool {
        obj.every($this, AS(isPred, (x) => isA(t, type(x))))
    }

    function get(obj: isListOf, idx: isInt): t {
        AS(isList, obj)[idx]
    }

    function set(obj: isListOf, idx: isInt, newVal: t): isListOf {
        AS(isList, obj)
        .set($this, idx, newVal)
        .AS(isListOf, $this)
    }

    isListOf
}


// vectors are lists of fixed size
interface gen_isVector;
memoized function gen_isVector(elementType: isPred, vSize: isInt): isPred {
    let isParentType: isPred = gen_isListOf(elementType);

    interface isVector<elementType, vSize> extends isParentType;

    function isVector(obj: isList): isBool {
        isVector(as(isParentType, obj))
    }

    function isVector(obj: isParentType): isBool {
        obj.size == vSize
    }

    isVector
}


let isListOfPreds: isPred = gen_isListOf(isPred);


// tuples are vectors of mixed types
interface gen_isTuple;
memoized function gen_isTuple(preds: isList): isPred {
    gen_isTuple(as(isListOfPreds, preds))
}

memoized function gen_isTuple(preds: isListOfPreds): isPred {
    let isParentType: isPred = gen_isVector(isAny, size(preds));

    interface isTuple<preds> extends isParentType;

    function isTuple(obj: isList): isBool {
        isTuple(as(isParentType, obj));
    }

    function isTuple(obj: isParentType): isBool {
        map(obj, type)
        .zip($this, preds)
        .every($this, AS(isPred, (pair) => {
            let isActual:   isPred = pair[0];
            let isExpected: isPred = pair[1];
            isA(isExpected, isActual);
        }))
    }

    isTuple
}


// complex numbers (test)
// ======================
let isComplexNumber: isPred = gen_isTuple([isReal, isReal]);

function add(x: isComplexNumber, y: isComplexNumber): isComplexNumber {
    [
        x[0] + y[0],
        x[1] + y[1]
    ].AS(isComplexNumber, $this)
}

function toString(x: isComplexNumber): isString {
    let im:  isReal   = x[1];
    let sym: isString = if (im < 0) " - " else " + ";

    "(" + x[0] + sym + abs(im) + "i)"
}

let c1: isComplexNumber = as(isComplexNumber, [1, 2]);
let c2: isComplexNumber = as(isComplexNumber, [1, -5]);
let c3: isComplexNumber = c1 + c2;

assert(c3 == AS(isComplexNumber, [2, -3]));
assert(toString(c3) == "(2 - 3i)");


// refs (test)
// ===========
interface gen_isRefOf;

memoized function gen_isRefOf(t: isPred): isPred {
    interface isRefOf<t> extends isRef;    

    function isRefOf(r: isRef): isBool {
        r().type == t
    }

    function apply(r: isRefOf, _: isList): t {
        AS(isRef, r)()
    }

    function set(r: isRefOf, newVal: isAny): isRefOf {
        set(r, as(t, newVal))
    }

    function set(r: isRefOf, newVal: t): isRefOf {
        AS(isRef, r)
        .set($this, newVal)
        .AS(isRefOf, $this)
    }

    isRefOf
}

let isRefOfInt: isPred = gen_isRefOf(isInt);
let ref: isRefOfInt = as(isRefOfInt, Ref(0));

assert(ref() == 0);
assertError(() => set(ref, "hello"));
assert(ref() == 0);

assert(set(ref, 1).type == isRefOfInt);
assert(ref() == 1);