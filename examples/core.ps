interface spy;

interface map;
interface zip;
interface every;

interface gen_isListOf;
interface gen_isVector;
interface gen_isTuple;


function spy(x: isAny, tag: isString): isAny {
    println(tag + ": " + x)
    x
}


// stack overflow, we need loops / lazy seqs / stackless impl
function map(xs: isList, f: isFn): isList {
    if (isEmpty(xs))
        List()
    else
        xs
        .slice($this, 1)
        .map($this, f)
        .unshift($this, f(xs[0]))
}


// we don't have and / or yet 🤦🏽‍♂️
// assuming both are of equal length
function zip(xs: isList, ys: isList): isList {
    if (isEmpty(xs))
        List()
    else
        xs
        .slice($this, 1)
        .zip($this, slice(ys, 1))
        .unshift($this, List(xs[0], ys[0]))
}


function every(xs: isList, f: isPred): isBool {
    if (isEmpty(xs))
        true
    else if (f(xs[0]))
        xs
        .slice($this, 1)
        .every($this, f)
    else
        false
}


// generic lists
memoized function gen_isListOf(t: isPred): isPred {
    interface isListOf;
    function isListOf(obj: isList): isBool {
        obj.every($this, AS(isPred, (x) => isA(t, type(x))))
    }
    derive(isList, isListOf)

    isListOf
}


// vectors are lists of fixed size
memoized function gen_isVector(elementType: isPred, vSize: isInt): isPred {
    let isParentType: isPred = gen_isListOf(elementType);

    interface isVector;

    function isVector(obj: isList): isBool {
        isVector(as(isParentType, obj))
    }

    function isVector(obj: isParentType): isBool {
        obj.size == vSize
    }

    derive(isParentType, isVector)

    isVector
}


let isListOfPreds: isPred = gen_isListOf(isPred);


// tuples are vectors of mixed types
memoized function gen_isTuple(preds: isListOfPreds): isPred {
    let isParentType: isPred = gen_isVector(isAny, size(preds));

    interface isTuple;

    function isTuple(obj: isList): isBool {
        isTuple(as(isParentType, obj));
    }

    function isTuple(obj: isParentType): isBool {
        obj
        .map($this, type)
        .zip($this, preds)
        .every($this, AS(isPred, (pair) => {
            let isActual: isPred   = pair[0];
            let isExpected: isPred = pair[1];
            isA(isExpected, isActual);
        }))
    }

    derive(isParentType, isTuple);

    isTuple
}


// complex numbers (test)
// ======================
let isComplexNumber: isPred =
    gen_isTuple(AS(isListOfPreds, List(isReal, isReal)));

function add(x: isComplexNumber, y: isComplexNumber): isComplexNumber {
    List(
        x[0] + y[0],
        x[1] + y[1]
    ).AS(isComplexNumber, $this)
}

function str(x: isComplexNumber): isString {
    let im: isReal = x[1];

    "(" 
    + x[0] 
    + (if (im < 0) " - " else " + ")
    + abs(im) 
    + "i)"
}

let c1: isComplexNumber = as(isComplexNumber, List(1, 2));
let c2: isComplexNumber = as(isComplexNumber, List(1, -5));
let c3: isComplexNumber = c1 + c2;

println(c3);