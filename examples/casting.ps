function isLessThan5(x: isInt): isBool {
    x < 5
}

let two: isInt = 2;
println("two: " + type(two));

// `as` soft-casts 
// the expression on the right
// to the type on the left
let softCastedTwo: isLessThan5 = genAs(isLessThan5)(two);
println("softCastedTwo: " + type(softCastedTwo));

// soft-casts complain at runtime
// if the casting is unsuccessful

// `two`'s type is still `isInt`
println("two: " + type(two));

let ten: isInt = 10;
// `AS` hard-casts a value
let hardCastedTen: isLessThan5 = genAS(isLessThan5)(ten);
println("hardCastedTen: " + type(hardCastedTen));

// hard-casts done using `AS`
// don't type check before casting

// you are telling the runtime
// to trust your judgement

// `ten`'s type is still `isInt`
println("ten: " + type(ten));

// `__AS__` is the rough-casting operator
// it mutates the type metadata of the object
__AS__(isInt, hardCastedTen);
println("rough-casted hardCastedTen: " + type(hardCastedTen))