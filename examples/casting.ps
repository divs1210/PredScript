interface isLessThan5 extends isInt;
function isLessThan5(x: isInt): isBool {
    x < 5
}

let two: isInt = 2;
assert(type(two) == isInt);

// `as` soft-casts 
// the value on the right
// to the predicate on the left
// if the value satisfies the predicate
let softCastedTwo: isLessThan5 = as(isLessThan5, two);
assert(type(softCastedTwo) == isLessThan5);

// soft-casts complain at runtime
// if the casting is unsuccessful

// `two`'s type is still `isInt`
assert(type(two) == isInt);

let ten: isInt = 10;
// `AS` hard-casts
// a value to a predicate
// without checking
let hardCastedTen: isLessThan5 = AS(isLessThan5, ten);
assert(type(hardCastedTen) == isLessThan5);

// hard-casts done using `AS`
// don't check before casting

// you are telling the runtime
// to trust your judgement

// `ten`'s type is still `isInt`
assert(type(ten) == isInt);